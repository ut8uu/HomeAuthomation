# WIRING
# CS		-> D15
# RESET	-> D2
# DC		-> D4
# MOSI	-> D16
# SCK		-> D17
# LCD		-> D5

esphome:
  name: "big-display"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "e4a1205ZAWxO7H9NmqXwdmWJYaOEWfAxxxTyZXoUu+w="

ota:
  password: "e4a12088743f9290f2d462d1488ada67"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-E4A120"
    password: "Oacu6Qx50NRu"

captive_portal:

output:
  # backlight
  - platform: ledc
    pin: GPIO5
    id: gpio_15_backlight_pwm

light:
  # backlight for HA
  - platform: monochromatic
    output: gpio_15_backlight_pwm
    name: "ILI9341 Display Backlight"
    id: back_light_big_display
    restore_mode: ALWAYS_ON

font:
  - file: "gfonts://Roboto"
    id: font35
    size: 30
  - file: "gfonts://Roboto"
    id: font120
    size: 100

color:
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%

sensor:
  - platform: homeassistant
    id: sun_elevation
    entity_id: sensor.sun_elevation

text_sensor:
  - platform: homeassistant
    id: outdoor_temperature
    entity_id: "sensor.outdoor_temperature"
  - platform: homeassistant
    id: indoor_temperature
    entity_id: "sensor.living_room_temperature"

time:
  - platform: sntp
    id: sntp_time

globals:
 - id: first_page             # First page of the display?
   type: bool
   restore_value: no
 - id: current_brightness             # Is display on?
   type: float
   restore_value: no
   initial_value: '-1.0'

spi:
  clk_pin: GPIO17
  mosi_pin: GPIO16
  miso_pin: GPIO22 # unused

display:
  - platform: ili9341
    model: TFT 2.4
    id: touch_display
    update_interval: 5s
    cs_pin: GPIO15
    dc_pin: GPIO4
    # if backlight is not controlled by pwm uncomment this 
    #led_pin:
    #  number: 15
    #  inverted: true
    reset_pin: GPIO2
    rotation: 90

    lambda: |-
      float br;
      if (id(sun_elevation).state > 0) {
        // Full brightness during the day
        br=1.0;    
      } else {
        // 50 percent at night
        br=0.5;
      }

      id(back_light_big_display).turn_on();

      auto max_y = 320;
      auto outdoor_temp_y = 30;
      auto indoor_temp_y = 130;
      it.fill(Color::BLACK);
      it.strftime(160, 0, id(font35), TextAlign::TOP_CENTER, "%d.%m.%Y %H:%M:%S", id(sntp_time).now());
      if (id(outdoor_temperature).has_state())
      {
        it.printf(max_y, outdoor_temp_y, id(font120), TextAlign::TOP_RIGHT, "%s C", id(outdoor_temperature).state.c_str());
      }
      else
      {
        it.print(max_y, outdoor_temp_y, id(font120), TextAlign::TOP_RIGHT, "--.- C");
      }
      if (id(indoor_temperature).has_state())
      {
        it.printf(max_y, indoor_temp_y, id(font120), TextAlign::TOP_RIGHT, "%s C", id(indoor_temperature).state.c_str());
      }
      else
      {
        it.print(max_y, indoor_temp_y, id(font120), TextAlign::TOP_RIGHT, "--.- C");
      }

      // Change brightnes if it needs to be changed
      if (id(current_brightness)!=br) {  
        //it.set_backlight_brightness(br);
        id(current_brightness)=br;
      }
